
//---------------------------------------------------------------------------------------------------
//RUKUS CODE WITH ADOKSHAJ'S API INTEGRATION

//---------------------------------------------------------------------------------------------------
// import {
//   MapContainer,
//   ImageOverlay,
//   Marker,
//   Popup,
//   SVGOverlay,
// } from "react-leaflet";
// import floorplan from "./assets/office.png";
// import "leaflet/dist/leaflet.css";
// import L from "leaflet";
// import axios from 'axios';
// import { useState, useEffect } from "react";

// function dBmToOffset(dBm) {
//   const minDbm = -80;
//   const maxDbm = -45;
//   const offset = ((dBm - minDbm) / (maxDbm - minDbm)) * 100;
//   return Math.min(Math.max(offset, 0), 100);
// }

// function App() {
//   const imageWidth = 1920;
//   const imageHeight = 1080;
//   const bounds = [
//     [0, 0],
//     [imageHeight, imageWidth],
//   ];
//   const handleMarkerDragEnd = (event, index) => {
//     let { lat, lng } = event.target.getLatLng();

//     // Constrain coordinates to the bounds of the image
//     lat = Math.min(Math.max(lat, 0), imageHeight);
//     lng = Math.min(Math.max(lng, 0), imageWidth);

//     setAddressPoints((prevPoints) => {
//       const newPoints = [...prevPoints];
//       newPoints[index] = [lat, lng];
//       return newPoints;
//     });
//   };
//   const createAP = () => {
//     // Add a new marker at the center of the image
//     setAddressPoints((prevPoints) => [
//       ...prevPoints,
//       [imageHeight / 2, imageWidth / 2],
//     ]);
//   };
//   const deleteMarker = (index) => {
//     setAddressPoints((prevPoints) => {
//       const newPoints = [...prevPoints];
//       newPoints.splice(index, 1); // Remove the marker at the given index
//       return newPoints;
//     });
//   };

//   const initialAddressPoints = [
//     [430, 380],
//     [610, 1530],
//     [910, 1700],
//   ];
  
//   const [addressPoints, setAddressPoints] = useState(initialAddressPoints);
//   // useEffect hook used for fetching signalStrengthData from Flask Server
//   const [signalStrengthData, setSignalStrengthData] = useState(null);

//   useEffect(() => {
//     fetchData();
//   }, []);

//   const fetchData = async () => {
//     try {
//       // URL of Flask Server running on Adokshaj's laptop
//       const response = await fetch('http://10.2.31.71:5000/');
     
//       const result = await response.json();
//       console.log(result)
//       setSignalStrengthData(result);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   if (!signalStrengthData) {
//     return <div>Loading...</div>; // Render a loading screen while fetching data
//   }

//   // Calculates offset values from the signalStrengthData after the values have been fetched from the Flask Server
//   const signalStrengthOffsets = {
//     signal_strength_0_to_5_metres_offset: dBmToOffset(parseInt(signalStrengthData.signal_strength_0_to_5_metres)),
//     signal_strength_5_to_15_metres_offset: dBmToOffset(parseInt(signalStrengthData.signal_strength_5_to_15_metres)),
//     signal_strength_15_to_30_metres_offset: dBmToOffset(parseInt(signalStrengthData.signal_strength_15_to_30_metres)),
//     signal_strength_30_to_50_metres_offset: dBmToOffset(parseInt(signalStrengthData.signal_strength_30_to_50_metres)),
//   };

//   return (
//     <div style={{ height: "100vh", width: "100vw" }}>
//       <button onClick={createAP} style={{ position: "absolute", zIndex: 1000 }}>
//         Add a AP Point
//       </button>
//       <MapContainer
//         zoom={-1}
//         center={[imageHeight / 2, imageWidth / 2]}
//         minZoom={-2}
//         bounds={bounds}
//         style={{ height: "100%", width: "100%" }}
//         crs={L.CRS.Simple}
//       >
//         <ImageOverlay zIndex={1} url={floorplan} bounds={bounds} />

//         {addressPoints.map(([y, x], index) => (

//           <Marker

//             key={index}
//             position={[y, x]}
//             draggable={true}
//             eventHandlers={{
//               dragend: (event) => handleMarkerDragEnd(event, index),
//             }}
//           >
//             <Popup>
//               <div>
//                 <p>Marker at [{y.toFixed(0)}, {x.toFixed(0)}]</p>
//                 <button
//                   onClick={() => deleteMarker(index)}
//                   style={{ backgroundColor: "red", color: "white", padding: "5px" }}
//                 >
//                   Delete Marker
//                 </button>
//               </div>
//             </Popup>
//           </Marker>
//         ))}

//         {/* SVG component using dynamic offsets */}
//         <SVGOverlay bounds={bounds} style={{ pointerEvents: "none" }}>
//           <defs>
//             <radialGradient id="wifiGradient" cx="50%" cy="50%" r="50%">
//               <stop offset={`${signalStrengthOffsets.signal_strength_30_to_50_metres_offset}%`} stopColor="green" stopOpacity={0.8} />
//               <stop offset={`${signalStrengthOffsets.signal_strength_15_to_30_metres_offset}%`} stopColor="yellow" stopOpacity={0.8} />
//               <stop offset={`${signalStrengthOffsets.signal_strength_5_to_15_metres_offset}%`} stopColor="orange" stopOpacity={0.75} />
//               <stop offset={`${signalStrengthOffsets.signal_strength_0_to_5_metres_offset}%`} stopColor="red" stopOpacity={0.2} />
//             </radialGradient>
//           </defs>

//           {addressPoints.map(([y, x], index) => {
//             const cxPercent = ((x / imageWidth) * 100).toFixed(2);
//             const cyPercent = ((1 - y / imageHeight) * 100).toFixed(2);

//             return (
//               <circle
//                 key={index}
//                 cx={`${cxPercent}%`}
//                 cy={`${cyPercent}%`}
//                 r="20%"
//                 fill="url(#wifiGradient)"
//                 opacity="0.8"
//               />
//             );
//           })}
//         </SVGOverlay>

//       </MapContainer>
//     </div>
//   );
// }

// export default App;